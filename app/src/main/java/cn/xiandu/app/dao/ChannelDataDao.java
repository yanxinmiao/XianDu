package cn.xiandu.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.xiandu.app.bean.ChannelData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_DATA".
*/
public class ChannelDataDao extends AbstractDao<ChannelData, Long> {

    public static final String TABLENAME = "CHANNEL_DATA";

    /**
     * Properties of entity ChannelData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PubDate = new Property(1, String.class, "pubDate", false, "PUB_DATE");
        public final static Property HavePic = new Property(2, boolean.class, "havePic", false, "HAVE_PIC");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ChannelName = new Property(4, String.class, "channelName", false, "CHANNEL_NAME");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Source = new Property(6, String.class, "source", false, "SOURCE");
        public final static Property ChannelId = new Property(7, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property Link = new Property(8, String.class, "link", false, "LINK");
    }


    public ChannelDataDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PUB_DATE\" TEXT," + // 1: pubDate
                "\"HAVE_PIC\" INTEGER NOT NULL ," + // 2: havePic
                "\"TITLE\" TEXT," + // 3: title
                "\"CHANNEL_NAME\" TEXT," + // 4: channelName
                "\"DESC\" TEXT," + // 5: desc
                "\"SOURCE\" TEXT," + // 6: source
                "\"CHANNEL_ID\" TEXT," + // 7: channelId
                "\"LINK\" TEXT);"); // 8: link
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(2, pubDate);
        }
        stmt.bindLong(3, entity.getHavePic() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(5, channelName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(8, channelId);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(9, link);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(2, pubDate);
        }
        stmt.bindLong(3, entity.getHavePic() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String channelName = entity.getChannelName();
        if (channelName != null) {
            stmt.bindString(5, channelName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(8, channelId);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(9, link);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChannelData readEntity(Cursor cursor, int offset) {
        ChannelData entity = new ChannelData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pubDate
            cursor.getShort(offset + 2) != 0, // havePic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // channelName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // source
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // channelId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // link
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannelData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPubDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHavePic(cursor.getShort(offset + 2) != 0);
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChannelName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChannelId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChannelData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChannelData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChannelData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
